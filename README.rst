calmjs.rjs
==========

A `RequireJS`_ toolchain built on top of |calmjs|_ for a well managed
workflow for bundling JavaScript code sourced from Python modules or
through standard JavaScript or Node.js packages.

.. _RequireJS: http://requirejs.org/


Introduction
------------

In essence, ``calmjs.rjs`` treats JavaScript files as both source and
compilation target, where the sources are provided from Python packages
or sourced from npm or others, and the compilation target is the binary
(bundle files) that is produced through the |requirejs|_ package.

Utilities are provided with ``calmjs.rjs`` that will generate bundled
JavaScript files as per the needs of the site-integrators and/or
end-users.  These bundled files can then be deployed over the web and be
used by client browsers, in conjunction with the Python packages that
implement the backend features.

Ultimately, this integration package should ease the integration and
interactions between of client-side JavaScript with server-side Python
thus make it easier for the two to be built, shipped and deployed
together.  Other utilities are provided to also aid the setup of
local Node.js environments to aid the acquisition of npm dependencies,
setting up of the test environments and harnesses for running of
JavaScript tests that are part of the Python packages for the associated
JavaScript code.


Features
--------

The core of the package is a toolchain that will load and compile all
registered JavaScript files within a Python environment and bundle
everything into a single file, as per the source package's package
requirements (i.e. its declared dependencies).  The resulting bundle
will be a JavaScript file generated by r.js which will comply with the
`Asynchronous Module Definition`_ (AMD) API.

Do note, in the initial implementation, the source file loosely follows
certain definitions that only mimic what ES6 intends to provide.  Even
with this, as a consequence of treating JavaScript within the Python
package as a source file for the compilation target which is the
deployable bundle, the input source files and exported paths generated
by calmjs are NOT meant for direct consumption of web clients such as
web browsers.  The produced bundle from this framework will be usable
through the AMD API.

.. _Asynchronous Module Definition: http://requirejs.org/docs/whyamd.html


Installation
------------

Currently under development, please install by cloning this repository
and run ``python setup.py develop`` within a working Python environment,
or follow the local framework or operating system's default method on
installation of development packages that have pulled this package in.


Usage
-----

Any exposed JavaScript code through the ``calmjs.module`` registry will
be picked up and compiled into a working RequireJS bundle.  For details
on how that registry work please refer to the README included with the
|calmjs|_ project.

For example, given the following entry points for that registry defined
by a package named ``example``:

.. code:: ini

    [calmjs.module]
    example.lib = example.lib
    example.app = example.app

While the import locations declared looks exactly like a Python module
(as per the rules of a Python entry point), the ``calmjs.module``
registry will present them using the es6 style import paths (i.e.
``'example/lib'`` and ``'example/app'``), so users of that need those
JavaScript modules to be sure they ``require`` those strings.  Also,
the default extractor will extract all source files within those
directories.

To extract all JavaScript modules declared within Python packages
through this registry can be done like so through the ``calmjs rjs``
bundler tool, which would extract all the relevant sources, create a
temporary build directory, generate the build manifest and invoke
``r.js`` on that file.  An example run:

.. code:: sh

    $ calmjs rjs example

    Tracing dependencies for: /home/user/example.js

    /home/user/example.js
    ----------------
    /tmp/tmp_build/build/example/lib/form.js
    /tmp/tmp_build/build/example/lib/ui.js
    /tmp/tmp_build/build/example/lib/main.js
    /tmp/tmp_build/build/example/app/index.js

As the build process used by ``calmjs.rjs`` is done in a separate build
directory, all imports through the Node.js module system must be
declared as ``extras_calmjs``.  For instance, if ``example/app/index``
need to use the ``jquery`` and ``underscore`` modules like so:

.. code:: JavaScript

    var $ = require('jquery'),
        _ = require('underscore');

It will need to declare the target location sourced from ``npm`` plus
the package_json for the dependencies, it will need to declare this in
its ``setup.py``:

.. code:: Python

    setup(
        # ...
        package_json={
            "dependencies": {
                "jquery": "~3.1.0",
                "underscore": "~1.8.0",
            },
        },
        extras_calmjs = {
            'node_modules': {
                'jquery': 'jquery/dist/jquery.js',
                'underscore': 'underscore/underscore.js',
            },
        },
    )

Naturally, rerun ``setup.py`` to get the package's new declaration into
the environment, and then invoke ``calmjs npm --install`` to install the
npm dependencies into the current directory. so then ``calmjs.rjs`` can
find the required files to put into the build directory for ``r.js`` to
locate them.

The resulting calmjs run may then end up looking something like this:

.. code:: sh

    $ calmjs rjs example

    Tracing dependencies for: /home/user/example.js

    /home/user/example.js
    ----------------
    /tmp/tmp_build/build/jquery.js
    /tmp/tmp_build/build/underscore.js
    /tmp/tmp_build/build/example/lib/form.js
    /tmp/tmp_build/build/example/lib/ui.js
    /tmp/tmp_build/build/example/lib/main.js
    /tmp/tmp_build/build/example/app/index.js


The transpiler will add the appropriate headers and thus the ``require``
statements through ``requirejs`` will automatically import from
``node_modules`` if available.  However, the ultimate end-users may not
want to generate a bundle that includes these extra libraries for any
reason (usually because they already have this declared elsewere), this
is usually done by specifying those two modules through the ``empty:``
scheme supported by ``r.js`` configuration.  This can be done like so:

.. code:: sh

    $ calmjs rjs example --bundled-map-method empty

    Tracing dependencies for: /home/user/example.js

    /home/user/example.js
    ----------------
    /tmp/tmp_build/build/example/lib/form.js
    /tmp/tmp_build/build/example/lib/ui.js
    /tmp/tmp_build/build/example/lib/main.js
    /tmp/tmp_build/build/example/app/index.js

Only the code from this package's and its dependencies declared within
the ``calmjs`` registry system should be included in the resulting file.
Naturally, those other modules will need to be included in other bundles
available elsewhere through the same ``requirejs`` loader before this
bundle is loaded.

The explicit ``extras_calmjs`` declaration also supports the usage
through ``bower`` (supported via |calmjs.bower|_); instead of using
``node_modules`` as the key, ``bower_components`` should be used
instead.

.. |requirejs| replace:: ``requirejs``
.. _requirejs: https://www.npmjs.com/package/requirejs
.. |calmjs| replace:: ``calmjs``
.. _calmjs: https://pypi.python.org/pypi/calmjs
.. |calmjs.bower| replace:: ``calmjs.bower``
.. _calmjs.bower: https://pypi.python.org/pypi/calmjs.bower


Troubleshooting
---------------

When calling ``calmjs rjs`` on a package, got ``ENOENT``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Typically this is caused by the package being used not declaring the
needed ``extras_calmjs`` for the appropriate packages within the correct
section.


Contribute
----------

- Issue Tracker: https://github.com/calmjs/calmjs.rjs/issues
- Source Code: https://github.com/calmjs/calmjs.rjs


License
-------

The project is licensed under the GPLv2 or later.
