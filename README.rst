calmjs.rjs
==========

A `RequireJS`_ toolchain built on top of |calmjs|_ for a well managed
workflow for bundling JavaScript code sourced from Python modules or
through standard JavaScript or `Node.js`_ packages.

.. image:: https://travis-ci.org/calmjs/calmjs.rjs.svg?branch=master
    :target: https://travis-ci.org/calmjs/calmjs.rjs
.. image:: https://coveralls.io/repos/github/calmjs/calmjs.rjs/badge.svg?branch=master
    :target: https://coveralls.io/github/calmjs/calmjs.rjs?branch=master

.. |calmjs| replace:: ``calmjs``
.. |calmjs.bower| replace:: ``calmjs.bower``
.. |calmjs.rjs| replace:: ``calmjs.rjs``
.. |calmjs.dev| replace:: ``calmjs.deg``
.. |npm| replace:: ``npm``
.. |r.js| replace:: ``r.js``
.. |requirejs| replace:: ``requirejs``
.. _Asynchronous Module Definition: http://requirejs.org/docs/whyamd.html
.. _bower: https://bower.io/
.. _calmjs: https://pypi.python.org/pypi/calmjs
.. _calmjs.bower: https://pypi.python.org/pypi/calmjs.bower
.. _calmjs.dev: https://pypi.python.org/pypi/calmjs.dev
.. _Node.js: https://nodejs.org/
.. _npm: https://www.npmjs.com/
.. _RequireJS: http://requirejs.org/
.. _requirejs: https://www.npmjs.com/package/requirejs


Introduction
------------

User interfaces for web applications typically rely on some form of
JavaScript code, no matter what languages the backend is written in.
Many Python packages have adopted the usage of `Node.js`_ for testing
the JavaScript code that's required by the front-end, with |npm|_ (or
|bower|_) being the package manager for the JavaScript side of the
library.  This often resulted in the separation of what would have been
a single package into two for each of the respective language's
distribution channels.  The consequences of this decision can end up
being problematic due to the difficulty in propagating the package's
version and dependency information across both channels in a consistent
and reproducible manner, ensuring difficulty for downstream package
users to acquire all the requirements and the supporting facilities to
generate the required backend stack with the appropriate front-end
artifacts needed to serve the application.  The calmjs framework is able
to bring the separation back together through the |calmjs.rjs| package,
by enabling the production of deployable artifacts from JavaScript code
within Python packages and whatever other sources they might have
declared (i.e. sourced from |npm| or others).

This is done by treating JavaScript files as both source and compilation
target, where the final artifact is produced through |r.js| from the
|requirejs|_ package.  These artifacts will contain the JavaScript
sources extracted from Python packages required by the selected Python
packages, plus all other sources declared as needed via the Node.js
environment.  Finally, these artifacts can then be deployed to a given
site and be used by client browsers, in conjunction with the originally
selected Python packages that provided the packend features.

Ultimately, the goal of |calmjs.rjs| is to ease the integration and
interactions between of client-side JavaScript with server-side Python,
by simplifying the task of building, shipping and deployment of the two
set of sources in one shared package and environment.  |calmjs| provides
the linkage between these two environment and the tools provided by
there will assist with the setup of a common, reproducible local Node.js
environments.

Finally, for quality control, |calmjs.dev| will provide the tools needed
to set up the test environment and harnesses for running of JavaScript
tests that are part of the Python packages for the associated JavaScript
code.


Features
--------

The core of the package is a toolchain that will load and compile all
registered JavaScript files within a Python environment and bundle
everything into a single artifact file, as per the source package's
package requirements (i.e. its declared dependencies).  The resulting
artifact will be a JavaScript file generated by |r.js| which will comply
with the `Asynchronous Module Definition`_ (AMD) API.

Do note, in the initial implementation, the source file loosely follows
certain definitions that only mimic what ES6 intends to provide.  Even
with this, as a consequence of treating JavaScript within the Python
package as a source file for the compilation target which is the
deployable artifact file, the input source files and exported paths
generated by |calmjs.rjs| are NOT meant for direct consumption of web
clients such as web browsers.  The produced artifact from this framework
will be usable through the AMD API.


Installation
------------

Currently under development, please install by cloning this repository
and run ``python setup.py develop`` within a working Python environment,
or follow the local framework or operating system's default method on
installation of development packages that have pulled this package in.


Usage
-----

Any exposed JavaScript code through the ``calmjs.module`` registry will
be picked up and compiled into a working RequireJS artifact.  For
details on how that registry work please refer to the README included
with the |calmjs|_ project.

For example, given the following entry points for that registry defined
by a package named ``example``:

.. code:: ini

    [calmjs.module]
    example.lib = example.lib
    example.app = example.app

While the import locations declared looks exactly like a Python module
(as per the rules of a Python entry point), the ``calmjs.module``
registry will present them using the es6 style import paths (i.e.
``'example/lib'`` and ``'example/app'``), so users of that need those
JavaScript modules to be sure they ``require`` those strings.  Also,
the default extractor will extract all source files within those
directories.  Also, as a consequence of how the imports are done, it is
recommended that no relative imports be used.

To extract all JavaScript modules declared within Python packages
through this registry can be done like so through the ``calmjs rjs``
build tool, which would extract all the relevant sources, create a
temporary build directory, generate the build manifest and invoke
``r.js`` on that file.  An example run:

.. code:: sh

    $ calmjs rjs example

    Tracing dependencies for: /home/user/example.js

    /home/user/example.js
    ----------------
    /tmp/tmp_build/build/example/lib/form.js
    /tmp/tmp_build/build/example/lib/ui.js
    /tmp/tmp_build/build/example/lib/main.js
    /tmp/tmp_build/build/example/app/index.js

As the build process used by |calmjs.rjs| is done in a separate build
directory, all imports through the Node.js module system must be
declared as ``extras_calmjs``.  For instance, if ``example/app/index``
need to use the ``jquery`` and ``underscore`` modules like so:

.. code:: JavaScript

    var $ = require('jquery'),
        _ = require('underscore');

It will need to declare the target location sourced from |npm| plus the
package_json for the dependencies, it will need to declare this in its
``setup.py``:

.. code:: Python

    setup(
        # ...
        package_json={
            "dependencies": {
                "jquery": "~3.1.0",
                "underscore": "~1.8.0",
            },
        },
        extras_calmjs = {
            'node_modules': {
                'jquery': 'jquery/dist/jquery.js',
                'underscore': 'underscore/underscore.js',
            },
        },
    )

Once that is done, rerun ``python setup.py egg_info`` to write the
freshly declared metadata into the package's egg-info directory, so that
it can be used from within the environment.  ``calmjs npm --install``
can now be invoked to install the |npm| dependencies into the current
directory; to permit |calmjs.rjs| to find the required files sourced
from |npm| to put into the build directory for ``r.js`` to locate them.

The resulting calmjs run may then end up looking something like this:

.. code:: sh

    $ calmjs rjs example

    Tracing dependencies for: /home/user/example.js

    /home/user/example.js
    ----------------
    /tmp/tmp_build/build/jquery.js
    /tmp/tmp_build/build/underscore.js
    /tmp/tmp_build/build/example/lib/form.js
    /tmp/tmp_build/build/example/lib/ui.js
    /tmp/tmp_build/build/example/lib/main.js
    /tmp/tmp_build/build/example/app/index.js


The transpiler will add the appropriate boilerplates and thus the
``require`` statements through ``requirejs`` will import from
``node_modules`` if the extras_calmjs have been declared.  However,
there are cases where the desired artifact should only contain the
sources from the Python package without the extras or vice versa (due to
the library being available via another deployed artifact), this is
supported by the ``empty:`` scheme by ``r.js``, and to enable it for
``calmjs rjs`` it can be done like so:

.. code:: sh

    $ calmjs rjs example --bundled-map-method empty --export-filename main.js

    Tracing dependencies for: /home/user/main.js

    /home/user/main.js
    ----------------
    /tmp/tmp_build/build/example/lib/form.js
    /tmp/tmp_build/build/example/lib/ui.js
    /tmp/tmp_build/build/example/lib/main.js
    /tmp/tmp_build/build/example/app/index.js

    $ calmjs rjs example --source-map-method empty --export-filename deps.js

    Tracing dependencies for: /home/user/deps.js

    /home/user/deps.js
    ----------------
    /tmp/tmp_build/build/jquery.js
    /tmp/tmp_build/build/underscore.js

The above example shows the generation of two separate artifacts, one
containing just the sources from the Python package ``example`` that had
been declared in the ``calmjs.module`` registry, and the other contains
only the external extra sources.

The explicit ``extras_calmjs`` declaration also supports the usage
through ``bower`` (supported via |calmjs.bower|_); instead of using
``node_modules`` as the key, ``bower_components`` should be used
instead.

Alternative registeries aside from ``calmjs.module`` can be specified
with the ``--source-registry`` flag.  Assuming there are registries in
the current environment registered as ``myreg1`` and ``myreg2`` and the
``example`` package has registered sources to both of them, the command
to build a bundle from both those registries into one artifact can be
triggered like so:

.. code:: sh

    $ calmjs rjs --source-registry myreg1 myreg2 -- example

Note the ``--`` after the registry lists and before the package to
denote the end of the ``--source-registry`` section.


Troubleshooting
---------------

When calling ``calmjs rjs`` on a package, got ``ENOENT``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Typically this is caused by the package being used not declaring the
needed ``extras_calmjs`` for the appropriate packages within the correct
section.


Contribute
----------

- Issue Tracker: https://github.com/calmjs/calmjs.rjs/issues
- Source Code: https://github.com/calmjs/calmjs.rjs


Legal
-----

The |calmjs.rjs| package is part of the calmjs project.

The calmjs project is copyright (c) 2016 Auckland Bioengineering
Institute, University of Auckland.  |calmjs.rjs| is licensed under the
terms of the GPLv2 or later.
